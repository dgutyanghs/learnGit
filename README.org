* Learn Git 笔记
** git rebase -i 代码修改
#+BEGIN_SRC git
$ git log 
 looking for the hash number your want to back to , then 'git rebase -i fhslfjs26482482' , 
 fhslfjs26482482 is previous hashnum than you want modify one.
$ git rebase -i "fhslfjs26482482"

 pick bdccbef Create README.md & add branchDec. hehe                                                  
 pick 4a121e1 modify by git rebase, hehe                                                              
 edit 9baf6e1 add a new file, --amend                                                                 
 pick e559e59 I add commit --amend , vi error solved 

修改完成后 , git rebase --continue

#+END_SRC
注意: 多人协作,共同开发时,不要对master分支rebase, 不然, 你的队友会骂娘的.\\
      本地  *git checkout -b newbranch* 只对 newbranch进行 rebase, 完成后 *merge* 到本地的 *master* 分支,再 *push* 到 服务器端.

** git commit --amend 后,vim编辑提交后,出现错误:vi error ...
#+BEGIN_EXAMPLE

$ git config --global core.editor "/usr/bin/vim --noplugin"
修改为vim 编辑器
#+END_EXAMPLE
** 单独恢复一个文件到指定的版本
#+BEGIN_EXAMPLE
首先查看该文件的历史版本信息：git log Default@2x.png

记录下需要恢复的commit版本号：如 9aa51d89799716aa68cff3f30c26f8815408e926

恢复该文件：git reset 9aa51d89799716aa68cff3f30c26f8815408e926 Default@2x.png

提交git:git commit -m "revert old file"
#+END_EXAMPLE
** 解决没有共同祖先的分支时错误：fatal: refusing to merge unrelated histories
#+BEGIN_EXAMPLE
先把github上的版本pull 下来
$:git pull origin master --allow-unrelated-histories
合并后再push上remote。
#+END_EXAMPLE
** 更改 服务器端 origin


#+BEGIN_SRC git 
$git remote rm origin  
$git remote add origin git@github.com:username/myapp.git 

#+END_SRC
** 文件移出缓冲区rm --cached
#+BEGIN_EXAMPLE
git add file.txt
git rm --cached file.txt
将file.txt 从cached中移除
#+END_EXAMPLE
